/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface BattlePassFactoryInterface extends utils.Interface {
  functions: {
    "craftingProxy()": FunctionFragment;
    "deployBattlePass(uint256)": FunctionFragment;
    "getBattlePassFromUnderlying(uint256)": FunctionFragment;
    "isBattlePassDeployed(address)": FunctionFragment;
    "owner()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "craftingProxy"
      | "deployBattlePass"
      | "getBattlePassFromUnderlying"
      | "isBattlePassDeployed"
      | "owner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "craftingProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployBattlePass",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBattlePassFromUnderlying",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isBattlePassDeployed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "craftingProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployBattlePass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBattlePassFromUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBattlePassDeployed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;

  events: {
    "BattlePassDeployed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BattlePassDeployed"): EventFragment;
}

export interface BattlePassDeployedEventObject {
  bp: string;
  creatorId: BigNumber;
}
export type BattlePassDeployedEvent = TypedEvent<
  [string, BigNumber],
  BattlePassDeployedEventObject
>;

export type BattlePassDeployedEventFilter =
  TypedEventFilter<BattlePassDeployedEvent>;

export interface BattlePassFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BattlePassFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    craftingProxy(overrides?: CallOverrides): Promise<[string]>;

    deployBattlePass(
      creatorId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBattlePassFromUnderlying(
      creatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isBattlePassDeployed(
      bp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;
  };

  craftingProxy(overrides?: CallOverrides): Promise<string>;

  deployBattlePass(
    creatorId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBattlePassFromUnderlying(
    creatorId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  isBattlePassDeployed(
    bp: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    craftingProxy(overrides?: CallOverrides): Promise<string>;

    deployBattlePass(
      creatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getBattlePassFromUnderlying(
      creatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    isBattlePassDeployed(
      bp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BattlePassDeployed(address,uint256)"(
      bp?: null,
      creatorId?: null
    ): BattlePassDeployedEventFilter;
    BattlePassDeployed(
      bp?: null,
      creatorId?: null
    ): BattlePassDeployedEventFilter;
  };

  estimateGas: {
    craftingProxy(overrides?: CallOverrides): Promise<BigNumber>;

    deployBattlePass(
      creatorId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBattlePassFromUnderlying(
      creatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBattlePassDeployed(
      bp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    craftingProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployBattlePass(
      creatorId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBattlePassFromUnderlying(
      creatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBattlePassDeployed(
      bp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
