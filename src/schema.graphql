scalar Date
scalar BigInt

# |========================| QUERY |========================|

type Query {
  getBattlePass(creatorId: Int!): BattlePass
  getInventory: Inventory
  getLootboxOptions(creatorId: Int!, lootboxId: Int!): [LootboxOption]

  getAllRecipes: [Recipe]
  getRecipes(creatorId: Int!): [Recipe]
  getRecipe(creatorId: Int!, recipeId: Int!): Recipe

  getSeasonXpRanking(creatorId: Int!, seasonId: Int!): [SeasonRanking]
  getAllXpRanking(creatorId: Int!): [AllSeasonRanking]
  getReputationRanking(creatorId: Int!): ReputationRanking
  getReputationRankings(creatorId: Int!): [ReputationRanking]

  getLootdrop(creatorId: Int!, lootdropId: String!): Lootdrop
  getLootdrops(creatorId: Int!): [Lootdrop]
  getClaimedLootdrops(creatorId: Int!): [Lootdrop]
  getPlayerCubits: PlayerCubits
  getPlayerLevel: PlayerLevel
  getPatronPlayers: [PlayerDetails]
}

# |========================| MUTATION |========================|

type Mutation {
  claimReward(
    creatorId: Int!
    level: Int!
    premium: Boolean!
    autoRedeem: Boolean!
  ): ClaimRewardResponse!
  redeemReward(creatorId: Int!, itemId: Int!): MutationResponse!
  craft(recipeId: Int!): MutationResponse!
  claimLootdrop(creatorId: Int!, contact: String!, lootdropId: String!): MutationResponse!
}

type ClaimRewardResponse {
  success: Boolean!
  reward: [Reward]
  description: String
  missingFields: UserMissingFields
}

type MutationResponse {
  success: Boolean!
}

# |========================| BattlePass |========================|

type BattlePass {
  name: String!
  description: String!
  price: String!
  currency: String!
  endDate: Date!
  seasonId: BigInt!
  maxLevel: BigInt!
  levelInfo: [LevelInfo]!
  userInfo: BattlePassUser
}

type LevelInfo {
  level: Int!
  xpToCompleteLevel: BigInt!
  freeReward: Reward
  premiumReward: Reward
}

type BattlePassUser {
  xp: BigInt!
  level: BigInt!
  unclaimedFreeRewards: [Int]!
  premium: PremiumBattlePassUser
}

type PremiumBattlePassUser {
  owned: BigInt!
  unclaimedPremiumRewards: [Int]!
}

type Reward {
  id: BigInt!
  qty: BigInt!
  metadata: RewardMetadata!
  rewardType: RewardType!
  creatorId: Int!
}

# do not change order
enum RewardType {
  PREMIUM_PASS
  CREATOR_TOKEN
  LOOTBOX
  REDEEMABLE
  SPECIAL
  GIVEAWAY
}

enum LootdropType {
  DAILY
  STREAK
  NORMAL
}

type RewardMetadata {
  name: String!
  description: String!
  image: String!
}

# |========================| INVENTORY |========================|

# handle each reward type separately
type Inventory {
  #PREMIUM_PASS,SPECIAL, CREATOR_TOKEN, UNREDEEMED REDEEMABLE, LOOTBOX just check balance
  default: [Reward]!
  redeemed: [Redeemed]!
}

# group by same id in same contract since user can redeem multiple of same id
type Redeemed {
  reward: Reward!
  status: [RedeemStatus]!
}

enum RedeemStatus {
  REDEEMED
  PROCESSING
  REJECTED
}

# |========================| LOOTBOX |========================|

type LootboxOption {
  probability: Int!
  reward: [Reward]!
}

# |========================| CRAFTING |========================|

type Recipe {
  recipeId: BigInt!
  isActive: Boolean!
  inputIngredients: [Reward]!
  outputIngredients: [Reward]!
  owner: Owner!
}

type Owner {
  creatorId: Int!
  name: String!
  pfp: String
  slug: String
}

# |========================| CLAIM |========================|

type UserMissingFields {
  payment: [RequiredUserPaymentOptions]
  social: [RequiredUserSocialOptions]
}

enum RequiredUserSocialOptions {
  INSTAGRAM_USERNAME
  TWITTER_USERNAME
  TWITCH_USERNAME
  CLASH_USERNAME
  PREFERRED_SOCIAL
}

enum RequiredUserPaymentOptions {
  CASHAPP
  PAYPAL_EMAIL
  VENMO_USERNAME
}

# |========================| LEADERBOARD |========================|

type SeasonRanking implements Ranking {
  rank: Int!
  topPercent: Float!
  id: String!
  pfp: String
  name: String
  total: Int!
}

type AllSeasonRanking implements Ranking {
  rank: Int!
  topPercent: Float!
  id: String!
  pfp: String
  name: String
  total: Int!
}

type ReputationRanking implements Ranking {
  rank: Int!
  topPercent: Float!
  id: String!
  pfp: String
  name: String
  total: Int!
}

interface Ranking {
  rank: Int!
  topPercent: Float!
  id: String!
  pfp: String
  name: String
  total: Int!
}

# |========================| LOOTDROP |========================|

enum Requirements {
  REPUTATION
  SEASONXP
  ALLXP
  STREAK
}

type Lootdrop {
  lootdropId: String
  lootdropType: LootdropType!
  active: Boolean!
  reward: Reward!
  requirements: Requirements!
  threshold: Int!
  start: Date!
  end: Date!
  url: String!
}

# Minecraft and Manacube related types
type PlayerDetails {
  uuid: String!
  name: String!
}

type PlayerCubits {
  uuid: String!
  balance: Float!
}

type LevelStat {
  key: String!
  value: Int!
  progression: Float!
}

type PlayerLevel {
  uuid: String!
  totalExp: Float!
  stats: [LevelStat]
}